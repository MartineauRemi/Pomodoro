{"version":3,"sources":["components/NavItem.js","components/Nav.js","components/Timer.js","assets/icon-settings.svg","components/ColorBtn.js","components/FontBtn.js","components/TimeItem.js","components/Settings.js","App.js","reportWebVitals.js","index.js"],"names":["NavItem","color","navItemActive","onClickNavItem","name","text","className","onClick","Nav","setNavItemActive","createNavItem","navItems","map","navItem","Timer","timerInitialValue","activeColor","TIMER_STATE_START","TIMER_STATE_RESTART","TIMER_STATE_PAUSE","useState","oneSecondCD","setOneSecondCD","setOneSecondCDTimeoutId","timerCurrentValue","settimerCurrentValue","ellipseInitial","setEllipseInitial","ellipseActive","setEllipseActive","ellipseRunning","setEllipseRunning","timeoutId","setTimeoutId","useEffect","timerState","stopTimer","setTimerState","time","clearTimeout","setTimeout","xmlns","style","animationDuration","animation","ry","rx","cy","cx","strokeWidth","parseInt","ColorBtn","colorChoice","onClickColorBtn","type","e","preventDefault","FontBtn","font","fontChoice","onClickFontBtn","TimeItem","value","onChangeValue","htmlFor","min","max","step","onChange","target","Settings","activeSettingsModal","setActiveSettingsModal","pomodoroValue","setPomodoroValue","shortBreakValue","setShortBreakValue","longBreakValue","setLongBreakValue","setActiveColor","setActiveFont","setFontChoice","setColorChoice","pomodoroChoice","setPomodoroChoice","shortBreakChoice","setShortBreakChoice","longBreakChoice","setLongBreakChoice","onSubmit","App","activeFont","src","settingsIcon","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee6d9ad6.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function NavItem({color, navItemActive, onClickNavItem, name, text}) {\r\n    return (\r\n        <li\r\n            className={`nav__item ${navItemActive === name? \"nav__item--active nav__item--active-\" + color : \"\"}`}\r\n            onClick={onClickNavItem}\r\n        >\r\n            {text}\r\n        </li>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport NavItem from \"./NavItem\"\r\n\r\nexport default function Nav({color, navItemActive, setNavItemActive}) {\r\n    const onClickNavItem = (name) => {\r\n        setNavItemActive(name)\r\n    }\r\n    \r\n    function createNavItem(name, text){\r\n        return (\r\n            <NavItem\r\n                key={name}\r\n                color={color}\r\n                name={name}\r\n                text={text}\r\n                navItemActive={navItemActive}\r\n                onClickNavItem={() => onClickNavItem(name)} />\r\n        )\r\n    }\r\n\r\n    const navItems = [\r\n       createNavItem('pomodoro', 'pomodoro'),\r\n       createNavItem('shortBreak', 'short break'),\r\n       createNavItem('longBreak', 'long break')\r\n    ]\r\n    return (\r\n        <nav className=\"nav\">\r\n            <ul>\r\n                {navItems.map(navItem => navItem)}\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n","import React, {useState, useEffect} from 'react'\r\n\r\nexport default function Timer({navItemActive, timerInitialValue, name, activeColor}) {    \r\n    const TIMER_STATE_START = \"START\"\r\n    const TIMER_STATE_RESTART = \"RESTART\"\r\n    const TIMER_STATE_PAUSE = \"PAUSE\"\r\n\r\n    /**\r\n     * This is a 1sec countdown. It restarts itself to 1000ms\r\n     * every second. It allows the main timer to start/pause\r\n     * without any delay, so that the animation of the circle\r\n     * is synchronized with the main timer value.\r\n     **/\r\n    const [oneSecondCD, setOneSecondCD] = useState(0)\r\n    const [OneSecondCDTimeoutId, setOneSecondCDTimeoutId] = useState()\r\n    \r\n\r\n    const [timerCurrentValue, settimerCurrentValue] = useState(timerInitialValue * 60)\r\n    const [ellipseInitial, setEllipseInitial] = useState(true)\r\n    const [ellipseActive, setEllipseActive] = useState(false)\r\n    const [ellipseRunning, setEllipseRunning] = useState(false)\r\n    const [timeoutId, setTimeoutId] = useState()\r\n    \r\n    //when the user changes the timer value in the settings, update the value of the Timer Component\r\n    useEffect(() => {\r\n        settimerCurrentValue(timerInitialValue * 60)\r\n        setEllipseActive(false)\r\n        setEllipseInitial(true)\r\n        if(timerState === TIMER_STATE_PAUSE)\r\n            stopTimer()\r\n        setTimerState(TIMER_STATE_START)\r\n    }, [timerInitialValue])\r\n\r\n    const getMinutes = (time) => parseInt(time / 60)\r\n    const getSeconds = (time) => (time % 60 < 10 ? \"0\" : \"\") + time % 60\r\n    const displayTimerValue = () => getMinutes(timerCurrentValue) + \":\" + getSeconds(timerCurrentValue)\r\n\r\n    //timer start / pause label\r\n    const [timerState, setTimerState] = useState(TIMER_STATE_START)\r\n\r\n    function updateTimerTextAfterClick(){\r\n        if(timerState === TIMER_STATE_START){\r\n            setTimerState(TIMER_STATE_PAUSE)\r\n        }else if(timerState ===  TIMER_STATE_PAUSE || timerState === TIMER_STATE_RESTART)\r\n            setTimerState(TIMER_STATE_START)\r\n    }\r\n\r\n    function onClickTimer(){\r\n        switch(timerState){\r\n            case TIMER_STATE_START:\r\n                startTimer()\r\n                if(!ellipseActive)\r\n                    setEllipseActive(true)\r\n                setEllipseRunning(true)\r\n                setEllipseInitial(false)\r\n                break\r\n            case TIMER_STATE_PAUSE:\r\n                stopTimer()\r\n                setEllipseRunning(false)\r\n                break\r\n\r\n            case TIMER_STATE_RESTART:\r\n                settimerCurrentValue(timerInitialValue * 60)\r\n                setEllipseActive(false)\r\n                setEllipseInitial(true)\r\n                break\r\n            default:\r\n                break\r\n        }\r\n        updateTimerTextAfterClick()\r\n    }\r\n\r\n    function startTimer(){\r\n        if(timerCurrentValue > 0)\r\n            setTimeout(() => settimerCurrentValue(timerCurrentValue - 1), oneSecondCD) //modifiée settimerCurrentValue(timerCurrentValue - 1)\r\n    }\r\n\r\n    function stopTimer(){\r\n        clearTimeout(timeoutId)\r\n    }\r\n\r\n\r\n\r\n    //main timer countdown\r\n    useEffect(() => {\r\n        if(timerState === TIMER_STATE_PAUSE){\r\n            if(timerCurrentValue > 0)\r\n                 setTimeoutId(setTimeout(() => {settimerCurrentValue(timerCurrentValue - 1)}, 1000)) \r\n            else if(timerCurrentValue === 0){\r\n                setTimerState(TIMER_STATE_RESTART) \r\n                setTimeout(() => setEllipseRunning(false), 1000)\r\n            }\r\n        }       \r\n    }, [timerCurrentValue])\r\n    \r\n    // 1sec timer countdown to add more precision to the main timer\r\n    useEffect(() => {\r\n        if(timerState === TIMER_STATE_PAUSE){\r\n            if(oneSecondCD > 0)\r\n                setOneSecondCDTimeoutId(setTimeout(() => {setOneSecondCD(oneSecondCD - 10)}, 10))\r\n            else if(oneSecondCD === 0){\r\n                setOneSecondCD(1000)\r\n            }\r\n        }\r\n    }, [oneSecondCD, timerCurrentValue])\r\n\r\n\r\n    //set the timer back to initial value if another timer is displayed\r\n    useEffect(() => {\r\n        stopTimer()\r\n        settimerCurrentValue(timerInitialValue * 60)\r\n        setEllipseActive(false)\r\n        setEllipseInitial(true)\r\n        setTimerState(TIMER_STATE_START)\r\n    }, [navItemActive])\r\n\r\n\r\n    return (\r\n        <section className={`timer ${navItemActive === name? \"timer--active\" : \"\"}`} onClick={onClickTimer}>\r\n            <div className=\"timer__circle\">\r\n                <svg className=\"circle\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <g>\r\n                        <ellipse\r\n                            className={`ellipse ${ellipseActive\r\n                                                    ? \"ellipse--active\"\r\n                                                    : \"\"\r\n                                                }\r\n                                        ellipse--${ellipseRunning\r\n                                                    ? \"running\"\r\n                                                    : \"paused\"\r\n                                                }\r\n                                        ${timerState === TIMER_STATE_RESTART\r\n                                        ? \"ellipse--completed\"\r\n                                        : \"\"}\r\n\r\n                                        ${ellipseInitial? \"ellipse--initial\" : \"\"}\r\n                                        \r\n                                        ellipse--${activeColor}`\r\n                            }\r\n                            style={\r\n                                ellipseActive ?\r\n                                    ({animationDuration: (timerInitialValue * 60) + \"s\"})\r\n                                    : (ellipseInitial?\r\n                                            ({animation: 'unset'})\r\n                                            : \"\")\r\n                                }\r\n                            ry=\"124\"\r\n                            rx=\"124\"\r\n                            cy=\"150\"\r\n                            cx=\"150\"\r\n                            strokeWidth=\"10\"/>\r\n                    </g>\r\n                </svg>\r\n            </div>\r\n            <div className=\"timer__content\">\r\n                <h1>{displayTimerValue(navItemActive)}</h1>\r\n                <h3>{timerState}</h3>\r\n            </div>\r\n        </section>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/icon-settings.e0a317db.svg\";","import React from 'react'\r\n\r\nexport default function ColorBtn({color, colorChoice, onClickColorBtn}) {\r\n    return (\r\n        <button\r\n            className={`settings__color-picker-btn settings__color-picker-btn--${color} ${colorChoice === color? \"settings__color-picker-btn--selected\" : \"\"}`}\r\n            type=\"button\"\r\n            onClick={(e) => {\r\n                e.preventDefault()\r\n                onClickColorBtn(color)\r\n                }\r\n            }\r\n        >\r\n        </button>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function FontBtn({font, fontChoice, onClickFontBtn}) {\r\n    return (\r\n        <button\r\n            className={`settings__font-picker-btn settings__font-picker-btn--${font} ${fontChoice === font ? \"settings__font-picker-btn--selected\" : \"\"}`}\r\n            type=\"button\"\r\n            onClick={(e) => {\r\n                e.preventDefault()\r\n                onClickFontBtn(font)\r\n                }\r\n            }\r\n        >\r\n            Aa\r\n        </button>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function TimeItem({name, text, value, onChangeValue}) {\r\n    const MAX_VALUE = 360\r\n    const MIN_VALUE = 0\r\n    const STEP = 1\r\n\r\n    const onClickMore = () => onChangeValue(value === MAX_VALUE? value : value + 1)\r\n    const onClickLess = () => onChangeValue(value === MIN_VALUE? value : value - 1)\r\n    return (\r\n        <section className=\"settings__time-item\">\r\n            <label htmlFor={name}>\r\n                <h4>{text}</h4>\r\n            </label>\r\n            <input\r\n                name={name}\r\n                type=\"number\"\r\n                min={MIN_VALUE}\r\n                max={MAX_VALUE}\r\n                step={STEP}\r\n                value={value}\r\n                onChange={(e) => onChangeValue(e.target.value)}/>\r\n            <div\r\n                className=\"settings__time-item-btn\r\n                           settings__time-item-btn--more\"\r\n                onClick={onClickMore}>\r\n            </div>\r\n            <div\r\n                className=\"settings__time-item-btn\r\n                           settings__time-item-btn--less\"\r\n                onClick={onClickLess}>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n","import React, {useState} from 'react'\r\nimport ColorBtn from './ColorBtn'\r\nimport FontBtn from './FontBtn'\r\nimport TimeItem from './TimeItem'\r\n\r\nexport default function Settings({activeSettingsModal, setActiveSettingsModal, pomodoroValue, setPomodoroValue, shortBreakValue, setShortBreakValue, longBreakValue, setLongBreakValue, activeColor, setActiveColor, setActiveFont}) {\r\n    const [fontChoice, setFontChoice] = useState('kumbh')\r\n    const [colorChoice, setColorChoice] = useState('red')\r\n    const [pomodoroChoice, setPomodoroChoice] = useState(pomodoroValue)\r\n    const [shortBreakChoice, setShortBreakChoice] = useState(shortBreakValue)\r\n    const [longBreakChoice, setLongBreakChoice] = useState(longBreakValue)\r\n\r\n    //onClick events \r\n    const onClickCloseBtn = () => setActiveSettingsModal(!activeSettingsModal)\r\n    const onClickColorBtn = (color) => setColorChoice(color)\r\n    const onClickFontBtn = (font) => setFontChoice(font)\r\n\r\n    //onChange events\r\n    const onChangePomodoroValue = (time) => setPomodoroChoice(time)\r\n    const onChangeShortBreakValue = (time) => setShortBreakChoice(time)\r\n    const onChangeLongBreakValue = (time) => setLongBreakChoice(time)\r\n\r\n\r\n    //form submit\r\n    const onSubmitSettings = (e) => {\r\n        e.preventDefault()\r\n        setActiveFont(fontChoice)\r\n        setActiveColor(colorChoice)\r\n        setPomodoroValue(pomodoroChoice)\r\n        setShortBreakValue(shortBreakChoice)\r\n        setLongBreakValue(longBreakChoice)\r\n        setActiveSettingsModal(!activeSettingsModal)\r\n    }\r\n\r\n    return (\r\n    <div className={`settings ${activeSettingsModal? \"settings--active\" : \"\"}`}>\r\n        <form className=\"settings__content\" onSubmit={onSubmitSettings}>\r\n            <h2>Settings</h2>\r\n            <button className=\"settings__close-btn\" type=\"button\" onClick={onClickCloseBtn}></button>\r\n\r\n            <fieldset className=\"settings__time\">\r\n                <h3>TIME (MINUTES)</h3>\r\n                <section className=\"settings__time-picker\">\r\n                    <TimeItem\r\n                        name=\"pomodoro\"\r\n                        text=\"pomodoro\"\r\n                        value={pomodoroChoice}\r\n                        onChangeValue={onChangePomodoroValue}/>\r\n                    <TimeItem\r\n                        name=\"shortBreak\"\r\n                        text=\"short break\"\r\n                        value={shortBreakChoice}\r\n                        onChangeValue={onChangeShortBreakValue}/>\r\n                    <TimeItem\r\n                        name=\"longBreak\"\r\n                        text=\"long break\"\r\n                        value={longBreakChoice}\r\n                        onChangeValue={onChangeLongBreakValue}/>\r\n                </section>\r\n            </fieldset>\r\n\r\n            <fieldset className=\"settings__font\">\r\n                <h3>FONT</h3>\r\n                <section className=\"settings__font-picker\">\r\n                    <FontBtn font='kumbh' fontChoice={fontChoice} onClickFontBtn={onClickFontBtn} />\r\n                    <FontBtn font='roboto' fontChoice={fontChoice} onClickFontBtn={onClickFontBtn} />\r\n                    <FontBtn font='space' fontChoice={fontChoice} onClickFontBtn={onClickFontBtn} />\r\n                </section>\r\n            </fieldset>\r\n\r\n            <fieldset className=\"settings__color\">\r\n                <h3>COLOR</h3>\r\n                <section className=\"settings__color-picker\">\r\n                    <ColorBtn color=\"red\" colorChoice={colorChoice} onClickColorBtn={onClickColorBtn}/>\r\n                    <ColorBtn color=\"turquoise\" colorChoice={colorChoice} onClickColorBtn={onClickColorBtn}/>\r\n                    <ColorBtn color=\"purple\" colorChoice={colorChoice} onClickColorBtn={onClickColorBtn}/>\r\n                </section>\r\n            </fieldset>\r\n            <input type=\"submit\" className={`settings__submit-btn settings__submit-btn--${activeColor}`} value=\"Apply\" />\r\n        </form>\r\n    </div>\r\n    )\r\n}\r\n","import React, {useState} from \"react\"\nimport Nav from './components/Nav';\nimport Timer from './components/Timer';\nimport './styles/css/styles.css';\nimport settingsIcon from \"./assets/icon-settings.svg\";\nimport Settings from './components/Settings';\n\nfunction App() {  \n  const INITIAL_POMODORO_VALUE = 25\n  const INITIAL_SHORT_BREAK_VALUE = 5\n  const INITIAL_LONG_BREAK_VALUE = 15\n\n  //toggle the Settings menu\n  const [activeSettingsModal, setActiveSettingsModal] = useState(false)\n  const onClickSettingsBtn = () => setActiveSettingsModal(!activeSettingsModal)\n\n  //Timers values\n  const [pomodoroValue, setPomodoroValue] = useState(INITIAL_POMODORO_VALUE)\n  const [shortBreakValue, setShortBreakValue] = useState(INITIAL_SHORT_BREAK_VALUE)\n  const [longBreakValue, setLongBreakValue] = useState(INITIAL_LONG_BREAK_VALUE)\n\n  //Active color and font in the entire application\n  const [activeColor, setActiveColor] = useState('red')\n  const [activeFont, setActiveFont] = useState('kumbh')\n\n  /**\n   * There are 3 differents timers that can countdown in parallel.\n   * However, only one at a time will be displayed on the user's screen.\n   * The Nav (and NavItems) components will allow the user to chose which timer to display\n   * 'navItemActive' is here to tell which timer is displayed\n   */\n  const [navItemActive, setNavItemActive] = useState('pomodoro')\n  \n  return (\n    <div className={`App App--${activeFont}`}>\n      <h2 className=\"title\">pomodoro</h2>\n      <Nav\n        color={activeColor}\n        navItemActive={navItemActive}\n        setNavItemActive={setNavItemActive}\n      />\n      <Timer\n        navItemActive={navItemActive}\n        timerInitialValue={pomodoroValue}\n        name=\"pomodoro\"\n        activeColor={activeColor}\n      />\n\n      <Timer\n        navItemActive={navItemActive}\n        timerInitialValue={shortBreakValue}\n        name=\"shortBreak\"\n        activeColor={activeColor}\n      />\n\n      <Timer\n        navItemActive={navItemActive}\n        timerInitialValue={longBreakValue}\n        name=\"longBreak\"\n        activeColor={activeColor}\n      />\n\n      <Settings\n        activeSettingsModal={activeSettingsModal}\n        setActiveSettingsModal={setActiveSettingsModal}\n        pomodoroValue={pomodoroValue}\n        setPomodoroValue={setPomodoroValue}\n        shortBreakValue={shortBreakValue}\n        setShortBreakValue={setShortBreakValue}\n        longBreakValue={longBreakValue}\n        setLongBreakValue={setLongBreakValue}\n        activeColor={activeColor}\n        setActiveColor={setActiveColor}\n        activeFont={activeFont}\n        setActiveFont={setActiveFont}\n        />\n      \n      <button className=\"btn btn--settings\" onClick={onClickSettingsBtn}>\n        <img src={settingsIcon} alt=\"settings icon\" />\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}